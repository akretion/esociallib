#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Oct 10 00:42:24 2017 by generateDS.py version 2.28b.
# Python 2.7.12 (default, Nov 19 2016, 06:48:10)  [GCC 5.4.0 20160609]
#
# Command line options:
#   ('--no-process-includes', '')
#   ('-o', 'esociallib/v2_04/evtPgtos.py')
#
# Command line arguments:
#   schemas/v2_04/evtPgtos.xsd
#
# Command line:
#   /usr/local/bin/generateDS --no-process-includes -o "esociallib/v2_04/evtPgtos.py" schemas/v2_04/evtPgtos.xsd
#
# Current working directory (os.getcwd()):
#   esociallib
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class eSocial(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, evtPgtos=None, Signature=None):
        self.original_tagname_ = None
        self.evtPgtos = evtPgtos
        self.Signature = Signature
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, eSocial)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if eSocial.subclass:
            return eSocial.subclass(*args_, **kwargs_)
        else:
            return eSocial(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_evtPgtos(self): return self.evtPgtos
    def set_evtPgtos(self, evtPgtos): self.evtPgtos = evtPgtos
    def get_Signature(self): return self.Signature
    def set_Signature(self, Signature): self.Signature = Signature
    def hasContent_(self):
        if (
            self.evtPgtos is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='eSocial', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('eSocial')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='eSocial')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='eSocial', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='eSocial'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='eSocial', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.evtPgtos is not None:
            self.evtPgtos.export(outfile, level, namespace_, name_='evtPgtos', pretty_print=pretty_print)
        if self.Signature is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignature>%s</%sSignature>%s' % ('ds:', self.gds_encode(self.gds_format_string(quote_xml(self.Signature), input_name='Signature')), 'ds:', eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'evtPgtos':
            obj_ = evtPgtos.factory()
            obj_.build(child_)
            self.evtPgtos = obj_
            obj_.original_tagname_ = 'evtPgtos'
        elif nodeName_ == 'Signature':
            Signature_ = child_.text
            Signature_ = self.gds_validate_string(Signature_, node, 'Signature')
            self.Signature = Signature_
# end class eSocial


class evtPgtos(GeneratedsSuper):
    """Evento pagtos. de rendimentos do trabalho"""
    subclass = None
    superclass = None
    def __init__(self, Id=None, ideEvento=None, ideEmpregador=None, ideBenef=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.ideEvento = ideEvento
        self.ideEmpregador = ideEmpregador
        self.ideBenef = ideBenef
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, evtPgtos)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if evtPgtos.subclass:
            return evtPgtos.subclass(*args_, **kwargs_)
        else:
            return evtPgtos(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ideEvento(self): return self.ideEvento
    def set_ideEvento(self, ideEvento): self.ideEvento = ideEvento
    def get_ideEmpregador(self): return self.ideEmpregador
    def set_ideEmpregador(self, ideEmpregador): self.ideEmpregador = ideEmpregador
    def get_ideBenef(self): return self.ideBenef
    def set_ideBenef(self, ideBenef): self.ideBenef = ideBenef
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.ideEvento is not None or
            self.ideEmpregador is not None or
            self.ideBenef is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='evtPgtos', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('evtPgtos')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='evtPgtos')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='evtPgtos', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='evtPgtos'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Id), input_name='Id')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='evtPgtos', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ideEvento is not None:
            self.ideEvento.export(outfile, level, namespace_, name_='ideEvento', pretty_print=pretty_print)
        if self.ideEmpregador is not None:
            self.ideEmpregador.export(outfile, level, namespace_, name_='ideEmpregador', pretty_print=pretty_print)
        if self.ideBenef is not None:
            self.ideBenef.export(outfile, level, namespace_, name_='ideBenef', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ideEvento':
            obj_ = TIdeEveFopagMensal.factory()
            obj_.build(child_)
            self.ideEvento = obj_
            obj_.original_tagname_ = 'ideEvento'
        elif nodeName_ == 'ideEmpregador':
            obj_ = TEmpregador.factory()
            obj_.build(child_)
            self.ideEmpregador = obj_
            obj_.original_tagname_ = 'ideEmpregador'
        elif nodeName_ == 'ideBenef':
            obj_ = ideBenef.factory()
            obj_.build(child_)
            self.ideBenef = obj_
            obj_.original_tagname_ = 'ideBenef'
# end class evtPgtos


class ideBenef(GeneratedsSuper):
    """Identificação do beneficiário do pagamento."""
    subclass = None
    superclass = None
    def __init__(self, cpfBenef=None, deps=None, infoPgto=None):
        self.original_tagname_ = None
        self.cpfBenef = cpfBenef
        self.deps = deps
        if infoPgto is None:
            self.infoPgto = []
        else:
            self.infoPgto = infoPgto
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ideBenef)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ideBenef.subclass:
            return ideBenef.subclass(*args_, **kwargs_)
        else:
            return ideBenef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cpfBenef(self): return self.cpfBenef
    def set_cpfBenef(self, cpfBenef): self.cpfBenef = cpfBenef
    def get_deps(self): return self.deps
    def set_deps(self, deps): self.deps = deps
    def get_infoPgto(self): return self.infoPgto
    def set_infoPgto(self, infoPgto): self.infoPgto = infoPgto
    def add_infoPgto(self, value): self.infoPgto.append(value)
    def insert_infoPgto_at(self, index, value): self.infoPgto.insert(index, value)
    def replace_infoPgto_at(self, index, value): self.infoPgto[index] = value
    def hasContent_(self):
        if (
            self.cpfBenef is not None or
            self.deps is not None or
            self.infoPgto
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ideBenef', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ideBenef')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ideBenef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ideBenef', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ideBenef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ideBenef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cpfBenef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scpfBenef>%s</%scpfBenef>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.cpfBenef), input_name='cpfBenef')), namespace_, eol_))
        if self.deps is not None:
            self.deps.export(outfile, level, namespace_, name_='deps', pretty_print=pretty_print)
        for infoPgto_ in self.infoPgto:
            infoPgto_.export(outfile, level, namespace_, name_='infoPgto', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cpfBenef':
            cpfBenef_ = child_.text
            cpfBenef_ = self.gds_validate_string(cpfBenef_, node, 'cpfBenef')
            self.cpfBenef = cpfBenef_
        elif nodeName_ == 'deps':
            obj_ = deps.factory()
            obj_.build(child_)
            self.deps = obj_
            obj_.original_tagname_ = 'deps'
        elif nodeName_ == 'infoPgto':
            obj_ = infoPgto.factory()
            obj_.build(child_)
            self.infoPgto.append(obj_)
            obj_.original_tagname_ = 'infoPgto'
# end class ideBenef


class cpfBenef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cpfBenef)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cpfBenef.subclass:
            return cpfBenef.subclass(*args_, **kwargs_)
        else:
            return cpfBenef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='cpfBenef', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cpfBenef')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cpfBenef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='cpfBenef', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='cpfBenef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='cpfBenef', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class cpfBenef


class deps(GeneratedsSuper):
    """Informações de dependentes do beneficiário do pagamento"""
    subclass = None
    superclass = None
    def __init__(self, vrDedDep=None):
        self.original_tagname_ = None
        self.vrDedDep = vrDedDep
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, deps)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if deps.subclass:
            return deps.subclass(*args_, **kwargs_)
        else:
            return deps(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_vrDedDep(self): return self.vrDedDep
    def set_vrDedDep(self, vrDedDep): self.vrDedDep = vrDedDep
    def hasContent_(self):
        if (
            self.vrDedDep is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='deps', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('deps')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='deps')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='deps', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='deps'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='deps', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.vrDedDep is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrDedDep>%s</%svrDedDep>%s' % (namespace_, self.gds_format_float(self.vrDedDep, input_name='vrDedDep'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'vrDedDep':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrDedDep')
            self.vrDedDep = fval_
# end class deps


class vrDedDep(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, vrDedDep)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if vrDedDep.subclass:
            return vrDedDep.subclass(*args_, **kwargs_)
        else:
            return vrDedDep(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='vrDedDep', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('vrDedDep')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='vrDedDep')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='vrDedDep', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='vrDedDep'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='vrDedDep', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class vrDedDep


class infoPgto(GeneratedsSuper):
    """Informações dos pagamentos efetuados"""
    subclass = None
    superclass = None
    def __init__(self, dtPgto=None, tpPgto=None, indResBr=None, detPgtoFl=None, detPgtoBenPr=None, detPgtoFer=None, detPgtoAnt=None, idePgtoExt=None):
        self.original_tagname_ = None
        if isinstance(dtPgto, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtPgto, '%Y-%m-%d').date()
        else:
            initvalue_ = dtPgto
        self.dtPgto = initvalue_
        self.tpPgto = tpPgto
        self.indResBr = indResBr
        if detPgtoFl is None:
            self.detPgtoFl = []
        else:
            self.detPgtoFl = detPgtoFl
        self.detPgtoBenPr = detPgtoBenPr
        if detPgtoFer is None:
            self.detPgtoFer = []
        else:
            self.detPgtoFer = detPgtoFer
        if detPgtoAnt is None:
            self.detPgtoAnt = []
        else:
            self.detPgtoAnt = detPgtoAnt
        self.idePgtoExt = idePgtoExt
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infoPgto)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infoPgto.subclass:
            return infoPgto.subclass(*args_, **kwargs_)
        else:
            return infoPgto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dtPgto(self): return self.dtPgto
    def set_dtPgto(self, dtPgto): self.dtPgto = dtPgto
    def get_tpPgto(self): return self.tpPgto
    def set_tpPgto(self, tpPgto): self.tpPgto = tpPgto
    def get_indResBr(self): return self.indResBr
    def set_indResBr(self, indResBr): self.indResBr = indResBr
    def get_detPgtoFl(self): return self.detPgtoFl
    def set_detPgtoFl(self, detPgtoFl): self.detPgtoFl = detPgtoFl
    def add_detPgtoFl(self, value): self.detPgtoFl.append(value)
    def insert_detPgtoFl_at(self, index, value): self.detPgtoFl.insert(index, value)
    def replace_detPgtoFl_at(self, index, value): self.detPgtoFl[index] = value
    def get_detPgtoBenPr(self): return self.detPgtoBenPr
    def set_detPgtoBenPr(self, detPgtoBenPr): self.detPgtoBenPr = detPgtoBenPr
    def get_detPgtoFer(self): return self.detPgtoFer
    def set_detPgtoFer(self, detPgtoFer): self.detPgtoFer = detPgtoFer
    def add_detPgtoFer(self, value): self.detPgtoFer.append(value)
    def insert_detPgtoFer_at(self, index, value): self.detPgtoFer.insert(index, value)
    def replace_detPgtoFer_at(self, index, value): self.detPgtoFer[index] = value
    def get_detPgtoAnt(self): return self.detPgtoAnt
    def set_detPgtoAnt(self, detPgtoAnt): self.detPgtoAnt = detPgtoAnt
    def add_detPgtoAnt(self, value): self.detPgtoAnt.append(value)
    def insert_detPgtoAnt_at(self, index, value): self.detPgtoAnt.insert(index, value)
    def replace_detPgtoAnt_at(self, index, value): self.detPgtoAnt[index] = value
    def get_idePgtoExt(self): return self.idePgtoExt
    def set_idePgtoExt(self, idePgtoExt): self.idePgtoExt = idePgtoExt
    def hasContent_(self):
        if (
            self.dtPgto is not None or
            self.tpPgto is not None or
            self.indResBr is not None or
            self.detPgtoFl or
            self.detPgtoBenPr is not None or
            self.detPgtoFer or
            self.detPgtoAnt or
            self.idePgtoExt is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='infoPgto', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infoPgto')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='infoPgto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='infoPgto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='infoPgto'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='infoPgto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dtPgto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdtPgto>%s</%sdtPgto>%s' % (namespace_, self.gds_format_date(self.dtPgto, input_name='dtPgto'), namespace_, eol_))
        if self.tpPgto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpPgto>%s</%stpPgto>%s' % (namespace_, self.gds_format_integer(self.tpPgto, input_name='tpPgto'), namespace_, eol_))
        if self.indResBr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindResBr>%s</%sindResBr>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.indResBr), input_name='indResBr')), namespace_, eol_))
        for detPgtoFl_ in self.detPgtoFl:
            detPgtoFl_.export(outfile, level, namespace_, name_='detPgtoFl', pretty_print=pretty_print)
        if self.detPgtoBenPr is not None:
            self.detPgtoBenPr.export(outfile, level, namespace_, name_='detPgtoBenPr', pretty_print=pretty_print)
        for detPgtoFer_ in self.detPgtoFer:
            detPgtoFer_.export(outfile, level, namespace_, name_='detPgtoFer', pretty_print=pretty_print)
        for detPgtoAnt_ in self.detPgtoAnt:
            detPgtoAnt_.export(outfile, level, namespace_, name_='detPgtoAnt', pretty_print=pretty_print)
        if self.idePgtoExt is not None:
            self.idePgtoExt.export(outfile, level, namespace_, name_='idePgtoExt', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dtPgto':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtPgto = dval_
        elif nodeName_ == 'tpPgto':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'tpPgto')
            self.tpPgto = ival_
        elif nodeName_ == 'indResBr':
            indResBr_ = child_.text
            indResBr_ = self.gds_validate_string(indResBr_, node, 'indResBr')
            self.indResBr = indResBr_
        elif nodeName_ == 'detPgtoFl':
            obj_ = detPgtoFl.factory()
            obj_.build(child_)
            self.detPgtoFl.append(obj_)
            obj_.original_tagname_ = 'detPgtoFl'
        elif nodeName_ == 'detPgtoBenPr':
            obj_ = detPgtoBenPr.factory()
            obj_.build(child_)
            self.detPgtoBenPr = obj_
            obj_.original_tagname_ = 'detPgtoBenPr'
        elif nodeName_ == 'detPgtoFer':
            obj_ = detPgtoFer.factory()
            obj_.build(child_)
            self.detPgtoFer.append(obj_)
            obj_.original_tagname_ = 'detPgtoFer'
        elif nodeName_ == 'detPgtoAnt':
            obj_ = detPgtoAnt.factory()
            obj_.build(child_)
            self.detPgtoAnt.append(obj_)
            obj_.original_tagname_ = 'detPgtoAnt'
        elif nodeName_ == 'idePgtoExt':
            obj_ = TNaoResid.factory()
            obj_.build(child_)
            self.idePgtoExt = obj_
            obj_.original_tagname_ = 'idePgtoExt'
# end class infoPgto


class dtPgto(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, dtPgto)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if dtPgto.subclass:
            return dtPgto.subclass(*args_, **kwargs_)
        else:
            return dtPgto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='dtPgto', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('dtPgto')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dtPgto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='dtPgto', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dtPgto'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dtPgto', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dtPgto


class tpPgto(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpPgto)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpPgto.subclass:
            return tpPgto.subclass(*args_, **kwargs_)
        else:
            return tpPgto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tpPgto', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpPgto')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpPgto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tpPgto', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpPgto'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpPgto', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tpPgto


class indResBr(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, indResBr)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if indResBr.subclass:
            return indResBr.subclass(*args_, **kwargs_)
        else:
            return indResBr(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='indResBr', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('indResBr')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='indResBr')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='indResBr', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='indResBr'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='indResBr', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class indResBr


class detPgtoFl(GeneratedsSuper):
    """Detalhamento dos pagamentos efetuados, relativos a folha de
    pagamento e rescisões contratuais, apurados em S-1200, S-1202,
    S-2299 e S-2399. O somatório de cada uma das rubricas cujo
    {codIncIRRF} = [31, 32, 33, 34, 35] não pode ser negativo."""
    subclass = None
    superclass = None
    def __init__(self, perRef=None, ideDmDev=None, indPgtoTt=None, vrLiq=None, nrRecArq=None, retPgtoTot=None, infoPgtoParc=None):
        self.original_tagname_ = None
        self.perRef = perRef
        self.ideDmDev = ideDmDev
        self.indPgtoTt = indPgtoTt
        self.vrLiq = vrLiq
        self.nrRecArq = nrRecArq
        if retPgtoTot is None:
            self.retPgtoTot = []
        else:
            self.retPgtoTot = retPgtoTot
        if infoPgtoParc is None:
            self.infoPgtoParc = []
        else:
            self.infoPgtoParc = infoPgtoParc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detPgtoFl)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detPgtoFl.subclass:
            return detPgtoFl.subclass(*args_, **kwargs_)
        else:
            return detPgtoFl(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_perRef(self): return self.perRef
    def set_perRef(self, perRef): self.perRef = perRef
    def get_ideDmDev(self): return self.ideDmDev
    def set_ideDmDev(self, ideDmDev): self.ideDmDev = ideDmDev
    def get_indPgtoTt(self): return self.indPgtoTt
    def set_indPgtoTt(self, indPgtoTt): self.indPgtoTt = indPgtoTt
    def get_vrLiq(self): return self.vrLiq
    def set_vrLiq(self, vrLiq): self.vrLiq = vrLiq
    def get_nrRecArq(self): return self.nrRecArq
    def set_nrRecArq(self, nrRecArq): self.nrRecArq = nrRecArq
    def get_retPgtoTot(self): return self.retPgtoTot
    def set_retPgtoTot(self, retPgtoTot): self.retPgtoTot = retPgtoTot
    def add_retPgtoTot(self, value): self.retPgtoTot.append(value)
    def insert_retPgtoTot_at(self, index, value): self.retPgtoTot.insert(index, value)
    def replace_retPgtoTot_at(self, index, value): self.retPgtoTot[index] = value
    def get_infoPgtoParc(self): return self.infoPgtoParc
    def set_infoPgtoParc(self, infoPgtoParc): self.infoPgtoParc = infoPgtoParc
    def add_infoPgtoParc(self, value): self.infoPgtoParc.append(value)
    def insert_infoPgtoParc_at(self, index, value): self.infoPgtoParc.insert(index, value)
    def replace_infoPgtoParc_at(self, index, value): self.infoPgtoParc[index] = value
    def hasContent_(self):
        if (
            self.perRef is not None or
            self.ideDmDev is not None or
            self.indPgtoTt is not None or
            self.vrLiq is not None or
            self.nrRecArq is not None or
            self.retPgtoTot or
            self.infoPgtoParc
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='detPgtoFl', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detPgtoFl')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='detPgtoFl')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='detPgtoFl', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='detPgtoFl'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='detPgtoFl', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.perRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperRef>%s</%sperRef>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.perRef), input_name='perRef')), namespace_, eol_))
        if self.ideDmDev is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sideDmDev>%s</%sideDmDev>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ideDmDev), input_name='ideDmDev')), namespace_, eol_))
        if self.indPgtoTt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindPgtoTt>%s</%sindPgtoTt>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.indPgtoTt), input_name='indPgtoTt')), namespace_, eol_))
        if self.vrLiq is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrLiq>%s</%svrLiq>%s' % (namespace_, self.gds_format_float(self.vrLiq, input_name='vrLiq'), namespace_, eol_))
        if self.nrRecArq is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrRecArq>%s</%snrRecArq>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.nrRecArq), input_name='nrRecArq')), namespace_, eol_))
        for retPgtoTot_ in self.retPgtoTot:
            retPgtoTot_.export(outfile, level, namespace_, name_='retPgtoTot', pretty_print=pretty_print)
        for infoPgtoParc_ in self.infoPgtoParc:
            infoPgtoParc_.export(outfile, level, namespace_, name_='infoPgtoParc', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'perRef':
            perRef_ = child_.text
            perRef_ = self.gds_validate_string(perRef_, node, 'perRef')
            self.perRef = perRef_
        elif nodeName_ == 'ideDmDev':
            ideDmDev_ = child_.text
            ideDmDev_ = self.gds_validate_string(ideDmDev_, node, 'ideDmDev')
            self.ideDmDev = ideDmDev_
        elif nodeName_ == 'indPgtoTt':
            indPgtoTt_ = child_.text
            indPgtoTt_ = self.gds_validate_string(indPgtoTt_, node, 'indPgtoTt')
            self.indPgtoTt = indPgtoTt_
        elif nodeName_ == 'vrLiq':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrLiq')
            self.vrLiq = fval_
        elif nodeName_ == 'nrRecArq':
            nrRecArq_ = child_.text
            nrRecArq_ = self.gds_validate_string(nrRecArq_, node, 'nrRecArq')
            self.nrRecArq = nrRecArq_
        elif nodeName_ == 'retPgtoTot':
            obj_ = retPgtoTot.factory()
            obj_.build(child_)
            self.retPgtoTot.append(obj_)
            obj_.original_tagname_ = 'retPgtoTot'
        elif nodeName_ == 'infoPgtoParc':
            obj_ = TPgtoParc.factory()
            obj_.build(child_)
            self.infoPgtoParc.append(obj_)
            obj_.original_tagname_ = 'infoPgtoParc'
# end class detPgtoFl


class perRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, perRef)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if perRef.subclass:
            return perRef.subclass(*args_, **kwargs_)
        else:
            return perRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='perRef', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('perRef')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='perRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='perRef', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='perRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='perRef', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class perRef


class ideDmDev(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ideDmDev)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ideDmDev.subclass:
            return ideDmDev.subclass(*args_, **kwargs_)
        else:
            return ideDmDev(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ideDmDev', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ideDmDev')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ideDmDev')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ideDmDev', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ideDmDev'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ideDmDev', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ideDmDev


class indPgtoTt(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, indPgtoTt)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if indPgtoTt.subclass:
            return indPgtoTt.subclass(*args_, **kwargs_)
        else:
            return indPgtoTt(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='indPgtoTt', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('indPgtoTt')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='indPgtoTt')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='indPgtoTt', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='indPgtoTt'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='indPgtoTt', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class indPgtoTt


class vrLiq(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, vrLiq)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if vrLiq.subclass:
            return vrLiq.subclass(*args_, **kwargs_)
        else:
            return vrLiq(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='vrLiq', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('vrLiq')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='vrLiq')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='vrLiq', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='vrLiq'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='vrLiq', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class vrLiq


class nrRecArq(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nrRecArq)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nrRecArq.subclass:
            return nrRecArq.subclass(*args_, **kwargs_)
        else:
            return nrRecArq(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nrRecArq', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nrRecArq')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nrRecArq')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nrRecArq', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nrRecArq'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nrRecArq', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class nrRecArq


class retPgtoTot(GeneratedsSuper):
    """Retenções efetuadas no ato do pagamento pelo valor total do
    demonstrativo."""
    subclass = None
    superclass = None
    def __init__(self, codRubr=None, ideTabRubr=None, qtdRubr=None, fatorRubr=None, vrUnit=None, vrRubr=None, penAlim=None):
        self.original_tagname_ = None
        self.codRubr = codRubr
        self.ideTabRubr = ideTabRubr
        self.qtdRubr = qtdRubr
        self.fatorRubr = fatorRubr
        self.vrUnit = vrUnit
        self.vrRubr = vrRubr
        if penAlim is None:
            self.penAlim = []
        else:
            self.penAlim = penAlim
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, retPgtoTot)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if retPgtoTot.subclass:
            return retPgtoTot.subclass(*args_, **kwargs_)
        else:
            return retPgtoTot(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codRubr(self): return self.codRubr
    def set_codRubr(self, codRubr): self.codRubr = codRubr
    def get_ideTabRubr(self): return self.ideTabRubr
    def set_ideTabRubr(self, ideTabRubr): self.ideTabRubr = ideTabRubr
    def get_qtdRubr(self): return self.qtdRubr
    def set_qtdRubr(self, qtdRubr): self.qtdRubr = qtdRubr
    def get_fatorRubr(self): return self.fatorRubr
    def set_fatorRubr(self, fatorRubr): self.fatorRubr = fatorRubr
    def get_vrUnit(self): return self.vrUnit
    def set_vrUnit(self, vrUnit): self.vrUnit = vrUnit
    def get_vrRubr(self): return self.vrRubr
    def set_vrRubr(self, vrRubr): self.vrRubr = vrRubr
    def get_penAlim(self): return self.penAlim
    def set_penAlim(self, penAlim): self.penAlim = penAlim
    def add_penAlim(self, value): self.penAlim.append(value)
    def insert_penAlim_at(self, index, value): self.penAlim.insert(index, value)
    def replace_penAlim_at(self, index, value): self.penAlim[index] = value
    def hasContent_(self):
        if (
            self.codRubr is not None or
            self.ideTabRubr is not None or
            self.qtdRubr is not None or
            self.fatorRubr is not None or
            self.vrUnit is not None or
            self.vrRubr is not None or
            self.penAlim
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='retPgtoTot', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('retPgtoTot')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='retPgtoTot')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='retPgtoTot', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='retPgtoTot'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='retPgtoTot', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodRubr>%s</%scodRubr>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.codRubr), input_name='codRubr')), namespace_, eol_))
        if self.ideTabRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sideTabRubr>%s</%sideTabRubr>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ideTabRubr), input_name='ideTabRubr')), namespace_, eol_))
        if self.qtdRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdRubr>%s</%sqtdRubr>%s' % (namespace_, self.gds_format_float(self.qtdRubr, input_name='qtdRubr'), namespace_, eol_))
        if self.fatorRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfatorRubr>%s</%sfatorRubr>%s' % (namespace_, self.gds_format_float(self.fatorRubr, input_name='fatorRubr'), namespace_, eol_))
        if self.vrUnit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrUnit>%s</%svrUnit>%s' % (namespace_, self.gds_format_float(self.vrUnit, input_name='vrUnit'), namespace_, eol_))
        if self.vrRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrRubr>%s</%svrRubr>%s' % (namespace_, self.gds_format_float(self.vrRubr, input_name='vrRubr'), namespace_, eol_))
        for penAlim_ in self.penAlim:
            penAlim_.export(outfile, level, namespace_, name_='penAlim', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codRubr':
            codRubr_ = child_.text
            codRubr_ = self.gds_validate_string(codRubr_, node, 'codRubr')
            self.codRubr = codRubr_
        elif nodeName_ == 'ideTabRubr':
            ideTabRubr_ = child_.text
            ideTabRubr_ = self.gds_validate_string(ideTabRubr_, node, 'ideTabRubr')
            self.ideTabRubr = ideTabRubr_
        elif nodeName_ == 'qtdRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'qtdRubr')
            self.qtdRubr = fval_
        elif nodeName_ == 'fatorRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'fatorRubr')
            self.fatorRubr = fval_
        elif nodeName_ == 'vrUnit':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrUnit')
            self.vrUnit = fval_
        elif nodeName_ == 'vrRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrRubr')
            self.vrRubr = fval_
        elif nodeName_ == 'penAlim':
            obj_ = TPensaoAlim.factory()
            obj_.build(child_)
            self.penAlim.append(obj_)
            obj_.original_tagname_ = 'penAlim'
# end class retPgtoTot


class codRubr(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codRubr)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codRubr.subclass:
            return codRubr.subclass(*args_, **kwargs_)
        else:
            return codRubr(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='codRubr', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codRubr')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='codRubr')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='codRubr', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='codRubr'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='codRubr', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class codRubr


class ideTabRubr(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ideTabRubr)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ideTabRubr.subclass:
            return ideTabRubr.subclass(*args_, **kwargs_)
        else:
            return ideTabRubr(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='ideTabRubr', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ideTabRubr')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ideTabRubr')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='ideTabRubr', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ideTabRubr'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ideTabRubr', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ideTabRubr


class qtdRubr(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, qtdRubr)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if qtdRubr.subclass:
            return qtdRubr.subclass(*args_, **kwargs_)
        else:
            return qtdRubr(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='qtdRubr', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('qtdRubr')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='qtdRubr')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='qtdRubr', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='qtdRubr'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='qtdRubr', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class qtdRubr


class fatorRubr(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, fatorRubr)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if fatorRubr.subclass:
            return fatorRubr.subclass(*args_, **kwargs_)
        else:
            return fatorRubr(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='fatorRubr', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('fatorRubr')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='fatorRubr')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='fatorRubr', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='fatorRubr'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='fatorRubr', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class fatorRubr


class vrUnit(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, vrUnit)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if vrUnit.subclass:
            return vrUnit.subclass(*args_, **kwargs_)
        else:
            return vrUnit(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='vrUnit', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('vrUnit')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='vrUnit')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='vrUnit', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='vrUnit'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='vrUnit', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class vrUnit


class vrRubr(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, vrRubr)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if vrRubr.subclass:
            return vrRubr.subclass(*args_, **kwargs_)
        else:
            return vrRubr(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='vrRubr', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('vrRubr')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='vrRubr')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='vrRubr', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='vrRubr'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='vrRubr', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class vrRubr


class detPgtoBenPr(GeneratedsSuper):
    """Detalhamento de pagamentos relativos a benefícios previdenciários"""
    subclass = None
    superclass = None
    def __init__(self, perRef=None, ideDmDev=None, indPgtoTt=None, vrLiq=None, retPgtoTot=None, infoPgtoParc=None):
        self.original_tagname_ = None
        self.perRef = perRef
        self.ideDmDev = ideDmDev
        self.indPgtoTt = indPgtoTt
        self.vrLiq = vrLiq
        if retPgtoTot is None:
            self.retPgtoTot = []
        else:
            self.retPgtoTot = retPgtoTot
        if infoPgtoParc is None:
            self.infoPgtoParc = []
        else:
            self.infoPgtoParc = infoPgtoParc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detPgtoBenPr)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detPgtoBenPr.subclass:
            return detPgtoBenPr.subclass(*args_, **kwargs_)
        else:
            return detPgtoBenPr(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_perRef(self): return self.perRef
    def set_perRef(self, perRef): self.perRef = perRef
    def get_ideDmDev(self): return self.ideDmDev
    def set_ideDmDev(self, ideDmDev): self.ideDmDev = ideDmDev
    def get_indPgtoTt(self): return self.indPgtoTt
    def set_indPgtoTt(self, indPgtoTt): self.indPgtoTt = indPgtoTt
    def get_vrLiq(self): return self.vrLiq
    def set_vrLiq(self, vrLiq): self.vrLiq = vrLiq
    def get_retPgtoTot(self): return self.retPgtoTot
    def set_retPgtoTot(self, retPgtoTot): self.retPgtoTot = retPgtoTot
    def add_retPgtoTot(self, value): self.retPgtoTot.append(value)
    def insert_retPgtoTot_at(self, index, value): self.retPgtoTot.insert(index, value)
    def replace_retPgtoTot_at(self, index, value): self.retPgtoTot[index] = value
    def get_infoPgtoParc(self): return self.infoPgtoParc
    def set_infoPgtoParc(self, infoPgtoParc): self.infoPgtoParc = infoPgtoParc
    def add_infoPgtoParc(self, value): self.infoPgtoParc.append(value)
    def insert_infoPgtoParc_at(self, index, value): self.infoPgtoParc.insert(index, value)
    def replace_infoPgtoParc_at(self, index, value): self.infoPgtoParc[index] = value
    def hasContent_(self):
        if (
            self.perRef is not None or
            self.ideDmDev is not None or
            self.indPgtoTt is not None or
            self.vrLiq is not None or
            self.retPgtoTot or
            self.infoPgtoParc
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='detPgtoBenPr', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detPgtoBenPr')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='detPgtoBenPr')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='detPgtoBenPr', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='detPgtoBenPr'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='detPgtoBenPr', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.perRef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperRef>%s</%sperRef>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.perRef), input_name='perRef')), namespace_, eol_))
        if self.ideDmDev is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sideDmDev>%s</%sideDmDev>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ideDmDev), input_name='ideDmDev')), namespace_, eol_))
        if self.indPgtoTt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindPgtoTt>%s</%sindPgtoTt>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.indPgtoTt), input_name='indPgtoTt')), namespace_, eol_))
        if self.vrLiq is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrLiq>%s</%svrLiq>%s' % (namespace_, self.gds_format_float(self.vrLiq, input_name='vrLiq'), namespace_, eol_))
        for retPgtoTot_ in self.retPgtoTot:
            retPgtoTot_.export(outfile, level, namespace_, name_='retPgtoTot', pretty_print=pretty_print)
        for infoPgtoParc_ in self.infoPgtoParc:
            infoPgtoParc_.export(outfile, level, namespace_, name_='infoPgtoParc', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'perRef':
            perRef_ = child_.text
            perRef_ = self.gds_validate_string(perRef_, node, 'perRef')
            self.perRef = perRef_
        elif nodeName_ == 'ideDmDev':
            ideDmDev_ = child_.text
            ideDmDev_ = self.gds_validate_string(ideDmDev_, node, 'ideDmDev')
            self.ideDmDev = ideDmDev_
        elif nodeName_ == 'indPgtoTt':
            indPgtoTt_ = child_.text
            indPgtoTt_ = self.gds_validate_string(indPgtoTt_, node, 'indPgtoTt')
            self.indPgtoTt = indPgtoTt_
        elif nodeName_ == 'vrLiq':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrLiq')
            self.vrLiq = fval_
        elif nodeName_ == 'retPgtoTot':
            obj_ = TRubrCaixa.factory()
            obj_.build(child_)
            self.retPgtoTot.append(obj_)
            obj_.original_tagname_ = 'retPgtoTot'
        elif nodeName_ == 'infoPgtoParc':
            obj_ = TPgtoParc.factory()
            obj_.build(child_)
            self.infoPgtoParc.append(obj_)
            obj_.original_tagname_ = 'infoPgtoParc'
# end class detPgtoBenPr


class detPgtoFer(GeneratedsSuper):
    """Detalhamento dos pagamentos efetuados relativos a férias. O
    somatório de cada uma das rubricas cujo {codIncCP} = [31, 32,
    34, 35] e {codIncIRRF} = [31, 32, 33, 34, 35] não pode ser
    negativo."""
    subclass = None
    superclass = None
    def __init__(self, codCateg=None, dtIniGoz=None, qtDias=None, vrLiq=None, detRubrFer=None):
        self.original_tagname_ = None
        self.codCateg = codCateg
        if isinstance(dtIniGoz, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtIniGoz, '%Y-%m-%d').date()
        else:
            initvalue_ = dtIniGoz
        self.dtIniGoz = initvalue_
        self.qtDias = qtDias
        self.vrLiq = vrLiq
        if detRubrFer is None:
            self.detRubrFer = []
        else:
            self.detRubrFer = detRubrFer
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detPgtoFer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detPgtoFer.subclass:
            return detPgtoFer.subclass(*args_, **kwargs_)
        else:
            return detPgtoFer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codCateg(self): return self.codCateg
    def set_codCateg(self, codCateg): self.codCateg = codCateg
    def get_dtIniGoz(self): return self.dtIniGoz
    def set_dtIniGoz(self, dtIniGoz): self.dtIniGoz = dtIniGoz
    def get_qtDias(self): return self.qtDias
    def set_qtDias(self, qtDias): self.qtDias = qtDias
    def get_vrLiq(self): return self.vrLiq
    def set_vrLiq(self, vrLiq): self.vrLiq = vrLiq
    def get_detRubrFer(self): return self.detRubrFer
    def set_detRubrFer(self, detRubrFer): self.detRubrFer = detRubrFer
    def add_detRubrFer(self, value): self.detRubrFer.append(value)
    def insert_detRubrFer_at(self, index, value): self.detRubrFer.insert(index, value)
    def replace_detRubrFer_at(self, index, value): self.detRubrFer[index] = value
    def hasContent_(self):
        if (
            self.codCateg is not None or
            self.dtIniGoz is not None or
            self.qtDias is not None or
            self.vrLiq is not None or
            self.detRubrFer
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='detPgtoFer', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detPgtoFer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='detPgtoFer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='detPgtoFer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='detPgtoFer'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='detPgtoFer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codCateg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodCateg>%s</%scodCateg>%s' % (namespace_, self.gds_format_integer(self.codCateg, input_name='codCateg'), namespace_, eol_))
        if self.dtIniGoz is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdtIniGoz>%s</%sdtIniGoz>%s' % (namespace_, self.gds_format_date(self.dtIniGoz, input_name='dtIniGoz'), namespace_, eol_))
        if self.qtDias is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtDias>%s</%sqtDias>%s' % (namespace_, self.gds_format_integer(self.qtDias, input_name='qtDias'), namespace_, eol_))
        if self.vrLiq is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrLiq>%s</%svrLiq>%s' % (namespace_, self.gds_format_float(self.vrLiq, input_name='vrLiq'), namespace_, eol_))
        for detRubrFer_ in self.detRubrFer:
            detRubrFer_.export(outfile, level, namespace_, name_='detRubrFer', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codCateg':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'codCateg')
            self.codCateg = ival_
        elif nodeName_ == 'dtIniGoz':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtIniGoz = dval_
        elif nodeName_ == 'qtDias':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'qtDias')
            self.qtDias = ival_
        elif nodeName_ == 'vrLiq':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrLiq')
            self.vrLiq = fval_
        elif nodeName_ == 'detRubrFer':
            obj_ = detRubrFer.factory()
            obj_.build(child_)
            self.detRubrFer.append(obj_)
            obj_.original_tagname_ = 'detRubrFer'
# end class detPgtoFer


class codCateg(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codCateg)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codCateg.subclass:
            return codCateg.subclass(*args_, **kwargs_)
        else:
            return codCateg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='codCateg', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codCateg')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='codCateg')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='codCateg', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='codCateg'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='codCateg', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class codCateg


class dtIniGoz(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, dtIniGoz)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if dtIniGoz.subclass:
            return dtIniGoz.subclass(*args_, **kwargs_)
        else:
            return dtIniGoz(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='dtIniGoz', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('dtIniGoz')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dtIniGoz')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='dtIniGoz', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dtIniGoz'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dtIniGoz', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dtIniGoz


class qtDias(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, qtDias)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if qtDias.subclass:
            return qtDias.subclass(*args_, **kwargs_)
        else:
            return qtDias(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='qtDias', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('qtDias')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='qtDias')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='qtDias', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='qtDias'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='qtDias', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class qtDias


class detRubrFer(GeneratedsSuper):
    """Detalhamento das rubricas do Recibo Antecipado de Férias"""
    subclass = None
    superclass = None
    def __init__(self, codRubr=None, ideTabRubr=None, qtdRubr=None, fatorRubr=None, vrUnit=None, vrRubr=None, penAlim=None):
        self.original_tagname_ = None
        self.codRubr = codRubr
        self.ideTabRubr = ideTabRubr
        self.qtdRubr = qtdRubr
        self.fatorRubr = fatorRubr
        self.vrUnit = vrUnit
        self.vrRubr = vrRubr
        if penAlim is None:
            self.penAlim = []
        else:
            self.penAlim = penAlim
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detRubrFer)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detRubrFer.subclass:
            return detRubrFer.subclass(*args_, **kwargs_)
        else:
            return detRubrFer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codRubr(self): return self.codRubr
    def set_codRubr(self, codRubr): self.codRubr = codRubr
    def get_ideTabRubr(self): return self.ideTabRubr
    def set_ideTabRubr(self, ideTabRubr): self.ideTabRubr = ideTabRubr
    def get_qtdRubr(self): return self.qtdRubr
    def set_qtdRubr(self, qtdRubr): self.qtdRubr = qtdRubr
    def get_fatorRubr(self): return self.fatorRubr
    def set_fatorRubr(self, fatorRubr): self.fatorRubr = fatorRubr
    def get_vrUnit(self): return self.vrUnit
    def set_vrUnit(self, vrUnit): self.vrUnit = vrUnit
    def get_vrRubr(self): return self.vrRubr
    def set_vrRubr(self, vrRubr): self.vrRubr = vrRubr
    def get_penAlim(self): return self.penAlim
    def set_penAlim(self, penAlim): self.penAlim = penAlim
    def add_penAlim(self, value): self.penAlim.append(value)
    def insert_penAlim_at(self, index, value): self.penAlim.insert(index, value)
    def replace_penAlim_at(self, index, value): self.penAlim[index] = value
    def hasContent_(self):
        if (
            self.codRubr is not None or
            self.ideTabRubr is not None or
            self.qtdRubr is not None or
            self.fatorRubr is not None or
            self.vrUnit is not None or
            self.vrRubr is not None or
            self.penAlim
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='detRubrFer', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detRubrFer')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='detRubrFer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='detRubrFer', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='detRubrFer'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='detRubrFer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodRubr>%s</%scodRubr>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.codRubr), input_name='codRubr')), namespace_, eol_))
        if self.ideTabRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sideTabRubr>%s</%sideTabRubr>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ideTabRubr), input_name='ideTabRubr')), namespace_, eol_))
        if self.qtdRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdRubr>%s</%sqtdRubr>%s' % (namespace_, self.gds_format_float(self.qtdRubr, input_name='qtdRubr'), namespace_, eol_))
        if self.fatorRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfatorRubr>%s</%sfatorRubr>%s' % (namespace_, self.gds_format_float(self.fatorRubr, input_name='fatorRubr'), namespace_, eol_))
        if self.vrUnit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrUnit>%s</%svrUnit>%s' % (namespace_, self.gds_format_float(self.vrUnit, input_name='vrUnit'), namespace_, eol_))
        if self.vrRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrRubr>%s</%svrRubr>%s' % (namespace_, self.gds_format_float(self.vrRubr, input_name='vrRubr'), namespace_, eol_))
        for penAlim_ in self.penAlim:
            penAlim_.export(outfile, level, namespace_, name_='penAlim', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codRubr':
            codRubr_ = child_.text
            codRubr_ = self.gds_validate_string(codRubr_, node, 'codRubr')
            self.codRubr = codRubr_
        elif nodeName_ == 'ideTabRubr':
            ideTabRubr_ = child_.text
            ideTabRubr_ = self.gds_validate_string(ideTabRubr_, node, 'ideTabRubr')
            self.ideTabRubr = ideTabRubr_
        elif nodeName_ == 'qtdRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'qtdRubr')
            self.qtdRubr = fval_
        elif nodeName_ == 'fatorRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'fatorRubr')
            self.fatorRubr = fval_
        elif nodeName_ == 'vrUnit':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrUnit')
            self.vrUnit = fval_
        elif nodeName_ == 'vrRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrRubr')
            self.vrRubr = fval_
        elif nodeName_ == 'penAlim':
            obj_ = TPensaoAlim.factory()
            obj_.build(child_)
            self.penAlim.append(obj_)
            obj_.original_tagname_ = 'penAlim'
# end class detRubrFer


class detPgtoAnt(GeneratedsSuper):
    """Pagamento relativo a competências anteriores ao início de
    obrigatoriedade do eSocial. O somatório de cada uma das rubricas
    cujo {codIncIRRF} = [31, 32, 33, 34, 35] não pode ser negativo."""
    subclass = None
    superclass = None
    def __init__(self, codCateg=None, infoPgtoAnt=None):
        self.original_tagname_ = None
        self.codCateg = codCateg
        if infoPgtoAnt is None:
            self.infoPgtoAnt = []
        else:
            self.infoPgtoAnt = infoPgtoAnt
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detPgtoAnt)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detPgtoAnt.subclass:
            return detPgtoAnt.subclass(*args_, **kwargs_)
        else:
            return detPgtoAnt(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codCateg(self): return self.codCateg
    def set_codCateg(self, codCateg): self.codCateg = codCateg
    def get_infoPgtoAnt(self): return self.infoPgtoAnt
    def set_infoPgtoAnt(self, infoPgtoAnt): self.infoPgtoAnt = infoPgtoAnt
    def add_infoPgtoAnt(self, value): self.infoPgtoAnt.append(value)
    def insert_infoPgtoAnt_at(self, index, value): self.infoPgtoAnt.insert(index, value)
    def replace_infoPgtoAnt_at(self, index, value): self.infoPgtoAnt[index] = value
    def hasContent_(self):
        if (
            self.codCateg is not None or
            self.infoPgtoAnt
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='detPgtoAnt', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detPgtoAnt')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='detPgtoAnt')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='detPgtoAnt', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='detPgtoAnt'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='detPgtoAnt', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codCateg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodCateg>%s</%scodCateg>%s' % (namespace_, self.gds_format_integer(self.codCateg, input_name='codCateg'), namespace_, eol_))
        for infoPgtoAnt_ in self.infoPgtoAnt:
            infoPgtoAnt_.export(outfile, level, namespace_, name_='infoPgtoAnt', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codCateg':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'codCateg')
            self.codCateg = ival_
        elif nodeName_ == 'infoPgtoAnt':
            obj_ = infoPgtoAnt.factory()
            obj_.build(child_)
            self.infoPgtoAnt.append(obj_)
            obj_.original_tagname_ = 'infoPgtoAnt'
# end class detPgtoAnt


class infoPgtoAnt(GeneratedsSuper):
    """Detalhamento do pagamento"""
    subclass = None
    superclass = None
    def __init__(self, tpBcIRRF=None, vrBcIRRF=None):
        self.original_tagname_ = None
        self.tpBcIRRF = tpBcIRRF
        self.vrBcIRRF = vrBcIRRF
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infoPgtoAnt)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infoPgtoAnt.subclass:
            return infoPgtoAnt.subclass(*args_, **kwargs_)
        else:
            return infoPgtoAnt(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tpBcIRRF(self): return self.tpBcIRRF
    def set_tpBcIRRF(self, tpBcIRRF): self.tpBcIRRF = tpBcIRRF
    def get_vrBcIRRF(self): return self.vrBcIRRF
    def set_vrBcIRRF(self, vrBcIRRF): self.vrBcIRRF = vrBcIRRF
    def hasContent_(self):
        if (
            self.tpBcIRRF is not None or
            self.vrBcIRRF is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='infoPgtoAnt', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infoPgtoAnt')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='infoPgtoAnt')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='infoPgtoAnt', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='infoPgtoAnt'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='infoPgtoAnt', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tpBcIRRF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpBcIRRF>%s</%stpBcIRRF>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.tpBcIRRF), input_name='tpBcIRRF')), namespace_, eol_))
        if self.vrBcIRRF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrBcIRRF>%s</%svrBcIRRF>%s' % (namespace_, self.gds_format_float(self.vrBcIRRF, input_name='vrBcIRRF'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tpBcIRRF':
            tpBcIRRF_ = child_.text
            tpBcIRRF_ = self.gds_validate_string(tpBcIRRF_, node, 'tpBcIRRF')
            self.tpBcIRRF = tpBcIRRF_
        elif nodeName_ == 'vrBcIRRF':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrBcIRRF')
            self.vrBcIRRF = fval_
# end class infoPgtoAnt


class tpBcIRRF(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpBcIRRF)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpBcIRRF.subclass:
            return tpBcIRRF.subclass(*args_, **kwargs_)
        else:
            return tpBcIRRF(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tpBcIRRF', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpBcIRRF')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpBcIRRF')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tpBcIRRF', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpBcIRRF'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpBcIRRF', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tpBcIRRF


class vrBcIRRF(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, vrBcIRRF)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if vrBcIRRF.subclass:
            return vrBcIRRF.subclass(*args_, **kwargs_)
        else:
            return vrBcIRRF(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='vrBcIRRF', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('vrBcIRRF')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='vrBcIRRF')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='vrBcIRRF', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='vrBcIRRF'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='vrBcIRRF', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class vrBcIRRF


class TIdeEveFopagMensal(GeneratedsSuper):
    """Identificação do Evento Periódico"""
    subclass = None
    superclass = None
    def __init__(self, indRetif=None, nrRecibo=None, indApuracao=None, perApur=None, tpAmb=None, procEmi=None, verProc=None):
        self.original_tagname_ = None
        self.indRetif = indRetif
        self.nrRecibo = nrRecibo
        self.indApuracao = indApuracao
        self.perApur = perApur
        self.tpAmb = tpAmb
        self.procEmi = procEmi
        self.verProc = verProc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TIdeEveFopagMensal)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TIdeEveFopagMensal.subclass:
            return TIdeEveFopagMensal.subclass(*args_, **kwargs_)
        else:
            return TIdeEveFopagMensal(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_indRetif(self): return self.indRetif
    def set_indRetif(self, indRetif): self.indRetif = indRetif
    def get_nrRecibo(self): return self.nrRecibo
    def set_nrRecibo(self, nrRecibo): self.nrRecibo = nrRecibo
    def get_indApuracao(self): return self.indApuracao
    def set_indApuracao(self, indApuracao): self.indApuracao = indApuracao
    def get_perApur(self): return self.perApur
    def set_perApur(self, perApur): self.perApur = perApur
    def get_tpAmb(self): return self.tpAmb
    def set_tpAmb(self, tpAmb): self.tpAmb = tpAmb
    def get_procEmi(self): return self.procEmi
    def set_procEmi(self, procEmi): self.procEmi = procEmi
    def get_verProc(self): return self.verProc
    def set_verProc(self, verProc): self.verProc = verProc
    def hasContent_(self):
        if (
            self.indRetif is not None or
            self.nrRecibo is not None or
            self.indApuracao is not None or
            self.perApur is not None or
            self.tpAmb is not None or
            self.procEmi is not None or
            self.verProc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TIdeEveFopagMensal', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TIdeEveFopagMensal')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TIdeEveFopagMensal')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TIdeEveFopagMensal', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TIdeEveFopagMensal'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TIdeEveFopagMensal', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.indRetif is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindRetif>%s</%sindRetif>%s' % (namespace_, self.gds_format_integer(self.indRetif, input_name='indRetif'), namespace_, eol_))
        if self.nrRecibo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrRecibo>%s</%snrRecibo>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.nrRecibo), input_name='nrRecibo')), namespace_, eol_))
        if self.indApuracao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindApuracao>%s</%sindApuracao>%s' % (namespace_, self.gds_format_integer(self.indApuracao, input_name='indApuracao'), namespace_, eol_))
        if self.perApur is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sperApur>%s</%sperApur>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.perApur), input_name='perApur')), namespace_, eol_))
        if self.tpAmb is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpAmb>%s</%stpAmb>%s' % (namespace_, self.gds_format_integer(self.tpAmb, input_name='tpAmb'), namespace_, eol_))
        if self.procEmi is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprocEmi>%s</%sprocEmi>%s' % (namespace_, self.gds_format_integer(self.procEmi, input_name='procEmi'), namespace_, eol_))
        if self.verProc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sverProc>%s</%sverProc>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.verProc), input_name='verProc')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'indRetif':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'indRetif')
            self.indRetif = ival_
        elif nodeName_ == 'nrRecibo':
            nrRecibo_ = child_.text
            nrRecibo_ = self.gds_validate_string(nrRecibo_, node, 'nrRecibo')
            self.nrRecibo = nrRecibo_
        elif nodeName_ == 'indApuracao':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'indApuracao')
            self.indApuracao = ival_
        elif nodeName_ == 'perApur':
            perApur_ = child_.text
            perApur_ = self.gds_validate_string(perApur_, node, 'perApur')
            self.perApur = perApur_
        elif nodeName_ == 'tpAmb':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'tpAmb')
            self.tpAmb = ival_
        elif nodeName_ == 'procEmi':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'procEmi')
            self.procEmi = ival_
        elif nodeName_ == 'verProc':
            verProc_ = child_.text
            verProc_ = self.gds_validate_string(verProc_, node, 'verProc')
            self.verProc = verProc_
# end class TIdeEveFopagMensal


class indRetif(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, indRetif)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if indRetif.subclass:
            return indRetif.subclass(*args_, **kwargs_)
        else:
            return indRetif(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='indRetif', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('indRetif')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='indRetif')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='indRetif', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='indRetif'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='indRetif', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class indRetif


class nrRecibo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nrRecibo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nrRecibo.subclass:
            return nrRecibo.subclass(*args_, **kwargs_)
        else:
            return nrRecibo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nrRecibo', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nrRecibo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nrRecibo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nrRecibo', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nrRecibo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nrRecibo', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class nrRecibo


class indApuracao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, indApuracao)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if indApuracao.subclass:
            return indApuracao.subclass(*args_, **kwargs_)
        else:
            return indApuracao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='indApuracao', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('indApuracao')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='indApuracao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='indApuracao', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='indApuracao'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='indApuracao', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class indApuracao


class perApur(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, perApur)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if perApur.subclass:
            return perApur.subclass(*args_, **kwargs_)
        else:
            return perApur(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='perApur', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('perApur')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='perApur')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='perApur', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='perApur'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='perApur', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class perApur


class tpAmb(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpAmb)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpAmb.subclass:
            return tpAmb.subclass(*args_, **kwargs_)
        else:
            return tpAmb(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tpAmb', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpAmb')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpAmb')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tpAmb', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpAmb'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpAmb', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tpAmb


class procEmi(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, procEmi)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if procEmi.subclass:
            return procEmi.subclass(*args_, **kwargs_)
        else:
            return procEmi(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='procEmi', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('procEmi')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='procEmi')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='procEmi', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='procEmi'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='procEmi', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class procEmi


class verProc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, verProc)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if verProc.subclass:
            return verProc.subclass(*args_, **kwargs_)
        else:
            return verProc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='verProc', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('verProc')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='verProc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='verProc', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='verProc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='verProc', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class verProc


class TEmpregador(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tpInsc=None, nrInsc=None):
        self.original_tagname_ = None
        self.tpInsc = tpInsc
        self.nrInsc = nrInsc
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TEmpregador)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TEmpregador.subclass:
            return TEmpregador.subclass(*args_, **kwargs_)
        else:
            return TEmpregador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tpInsc(self): return self.tpInsc
    def set_tpInsc(self, tpInsc): self.tpInsc = tpInsc
    def get_nrInsc(self): return self.nrInsc
    def set_nrInsc(self, nrInsc): self.nrInsc = nrInsc
    def hasContent_(self):
        if (
            self.tpInsc is not None or
            self.nrInsc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TEmpregador', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TEmpregador')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TEmpregador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TEmpregador', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TEmpregador'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TEmpregador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tpInsc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stpInsc>%s</%stpInsc>%s' % (namespace_, self.gds_format_integer(self.tpInsc, input_name='tpInsc'), namespace_, eol_))
        if self.nrInsc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrInsc>%s</%snrInsc>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.nrInsc), input_name='nrInsc')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tpInsc':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'tpInsc')
            self.tpInsc = ival_
        elif nodeName_ == 'nrInsc':
            nrInsc_ = child_.text
            nrInsc_ = self.gds_validate_string(nrInsc_, node, 'nrInsc')
            self.nrInsc = nrInsc_
# end class TEmpregador


class tpInsc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tpInsc)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tpInsc.subclass:
            return tpInsc.subclass(*args_, **kwargs_)
        else:
            return tpInsc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='tpInsc', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tpInsc')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tpInsc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='tpInsc', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='tpInsc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='tpInsc', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class tpInsc


class nrInsc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nrInsc)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nrInsc.subclass:
            return nrInsc.subclass(*args_, **kwargs_)
        else:
            return nrInsc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nrInsc', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nrInsc')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nrInsc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nrInsc', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nrInsc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nrInsc', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class nrInsc


class TPensaoAlim(GeneratedsSuper):
    """Pensao alimentícia"""
    subclass = None
    superclass = None
    def __init__(self, cpfBenef=None, dtNasctoBenef=None, nmBenefic=None, vlrPensao=None):
        self.original_tagname_ = None
        self.cpfBenef = cpfBenef
        if isinstance(dtNasctoBenef, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtNasctoBenef, '%Y-%m-%d').date()
        else:
            initvalue_ = dtNasctoBenef
        self.dtNasctoBenef = initvalue_
        self.nmBenefic = nmBenefic
        self.vlrPensao = vlrPensao
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TPensaoAlim)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TPensaoAlim.subclass:
            return TPensaoAlim.subclass(*args_, **kwargs_)
        else:
            return TPensaoAlim(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cpfBenef(self): return self.cpfBenef
    def set_cpfBenef(self, cpfBenef): self.cpfBenef = cpfBenef
    def get_dtNasctoBenef(self): return self.dtNasctoBenef
    def set_dtNasctoBenef(self, dtNasctoBenef): self.dtNasctoBenef = dtNasctoBenef
    def get_nmBenefic(self): return self.nmBenefic
    def set_nmBenefic(self, nmBenefic): self.nmBenefic = nmBenefic
    def get_vlrPensao(self): return self.vlrPensao
    def set_vlrPensao(self, vlrPensao): self.vlrPensao = vlrPensao
    def hasContent_(self):
        if (
            self.cpfBenef is not None or
            self.dtNasctoBenef is not None or
            self.nmBenefic is not None or
            self.vlrPensao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TPensaoAlim', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TPensaoAlim')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TPensaoAlim')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TPensaoAlim', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TPensaoAlim'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TPensaoAlim', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cpfBenef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scpfBenef>%s</%scpfBenef>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.cpfBenef), input_name='cpfBenef')), namespace_, eol_))
        if self.dtNasctoBenef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdtNasctoBenef>%s</%sdtNasctoBenef>%s' % (namespace_, self.gds_format_date(self.dtNasctoBenef, input_name='dtNasctoBenef'), namespace_, eol_))
        if self.nmBenefic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snmBenefic>%s</%snmBenefic>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.nmBenefic), input_name='nmBenefic')), namespace_, eol_))
        if self.vlrPensao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svlrPensao>%s</%svlrPensao>%s' % (namespace_, self.gds_format_float(self.vlrPensao, input_name='vlrPensao'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cpfBenef':
            cpfBenef_ = child_.text
            cpfBenef_ = self.gds_validate_string(cpfBenef_, node, 'cpfBenef')
            self.cpfBenef = cpfBenef_
        elif nodeName_ == 'dtNasctoBenef':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtNasctoBenef = dval_
        elif nodeName_ == 'nmBenefic':
            nmBenefic_ = child_.text
            nmBenefic_ = self.gds_validate_string(nmBenefic_, node, 'nmBenefic')
            self.nmBenefic = nmBenefic_
        elif nodeName_ == 'vlrPensao':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vlrPensao')
            self.vlrPensao = fval_
# end class TPensaoAlim


class dtNasctoBenef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, dtNasctoBenef)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if dtNasctoBenef.subclass:
            return dtNasctoBenef.subclass(*args_, **kwargs_)
        else:
            return dtNasctoBenef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='dtNasctoBenef', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('dtNasctoBenef')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dtNasctoBenef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='dtNasctoBenef', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dtNasctoBenef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dtNasctoBenef', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dtNasctoBenef


class nmBenefic(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nmBenefic)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nmBenefic.subclass:
            return nmBenefic.subclass(*args_, **kwargs_)
        else:
            return nmBenefic(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nmBenefic', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nmBenefic')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nmBenefic')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nmBenefic', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nmBenefic'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nmBenefic', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class nmBenefic


class vlrPensao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, vlrPensao)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if vlrPensao.subclass:
            return vlrPensao.subclass(*args_, **kwargs_)
        else:
            return vlrPensao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='vlrPensao', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('vlrPensao')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='vlrPensao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='vlrPensao', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='vlrPensao'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='vlrPensao', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class vlrPensao


class TPgtoParc(GeneratedsSuper):
    """Detalhamento do pagamento parcial utilizando-se das rubricas de
    folha de pagamento. Devem ser utilizadas todas as rubricas que
    compõem o pagamento, ou seja, vencimentos, descontos e
    informativas (se necessário)."""
    subclass = None
    superclass = None
    def __init__(self, codRubr=None, ideTabRubr=None, qtdRubr=None, fatorRubr=None, vrUnit=None, vrRubr=None):
        self.original_tagname_ = None
        self.codRubr = codRubr
        self.ideTabRubr = ideTabRubr
        self.qtdRubr = qtdRubr
        self.fatorRubr = fatorRubr
        self.vrUnit = vrUnit
        self.vrRubr = vrRubr
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TPgtoParc)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TPgtoParc.subclass:
            return TPgtoParc.subclass(*args_, **kwargs_)
        else:
            return TPgtoParc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codRubr(self): return self.codRubr
    def set_codRubr(self, codRubr): self.codRubr = codRubr
    def get_ideTabRubr(self): return self.ideTabRubr
    def set_ideTabRubr(self, ideTabRubr): self.ideTabRubr = ideTabRubr
    def get_qtdRubr(self): return self.qtdRubr
    def set_qtdRubr(self, qtdRubr): self.qtdRubr = qtdRubr
    def get_fatorRubr(self): return self.fatorRubr
    def set_fatorRubr(self, fatorRubr): self.fatorRubr = fatorRubr
    def get_vrUnit(self): return self.vrUnit
    def set_vrUnit(self, vrUnit): self.vrUnit = vrUnit
    def get_vrRubr(self): return self.vrRubr
    def set_vrRubr(self, vrRubr): self.vrRubr = vrRubr
    def hasContent_(self):
        if (
            self.codRubr is not None or
            self.ideTabRubr is not None or
            self.qtdRubr is not None or
            self.fatorRubr is not None or
            self.vrUnit is not None or
            self.vrRubr is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TPgtoParc', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TPgtoParc')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TPgtoParc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TPgtoParc', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TPgtoParc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TPgtoParc', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodRubr>%s</%scodRubr>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.codRubr), input_name='codRubr')), namespace_, eol_))
        if self.ideTabRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sideTabRubr>%s</%sideTabRubr>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ideTabRubr), input_name='ideTabRubr')), namespace_, eol_))
        if self.qtdRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdRubr>%s</%sqtdRubr>%s' % (namespace_, self.gds_format_float(self.qtdRubr, input_name='qtdRubr'), namespace_, eol_))
        if self.fatorRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfatorRubr>%s</%sfatorRubr>%s' % (namespace_, self.gds_format_float(self.fatorRubr, input_name='fatorRubr'), namespace_, eol_))
        if self.vrUnit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrUnit>%s</%svrUnit>%s' % (namespace_, self.gds_format_float(self.vrUnit, input_name='vrUnit'), namespace_, eol_))
        if self.vrRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrRubr>%s</%svrRubr>%s' % (namespace_, self.gds_format_float(self.vrRubr, input_name='vrRubr'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codRubr':
            codRubr_ = child_.text
            codRubr_ = self.gds_validate_string(codRubr_, node, 'codRubr')
            self.codRubr = codRubr_
        elif nodeName_ == 'ideTabRubr':
            ideTabRubr_ = child_.text
            ideTabRubr_ = self.gds_validate_string(ideTabRubr_, node, 'ideTabRubr')
            self.ideTabRubr = ideTabRubr_
        elif nodeName_ == 'qtdRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'qtdRubr')
            self.qtdRubr = fval_
        elif nodeName_ == 'fatorRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'fatorRubr')
            self.fatorRubr = fval_
        elif nodeName_ == 'vrUnit':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrUnit')
            self.vrUnit = fval_
        elif nodeName_ == 'vrRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrRubr')
            self.vrRubr = fval_
# end class TPgtoParc


class TRubrCaixa(GeneratedsSuper):
    """Rubricas de pagamento"""
    subclass = None
    superclass = None
    def __init__(self, codRubr=None, ideTabRubr=None, qtdRubr=None, fatorRubr=None, vrUnit=None, vrRubr=None):
        self.original_tagname_ = None
        self.codRubr = codRubr
        self.ideTabRubr = ideTabRubr
        self.qtdRubr = qtdRubr
        self.fatorRubr = fatorRubr
        self.vrUnit = vrUnit
        self.vrRubr = vrRubr
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TRubrCaixa)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TRubrCaixa.subclass:
            return TRubrCaixa.subclass(*args_, **kwargs_)
        else:
            return TRubrCaixa(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codRubr(self): return self.codRubr
    def set_codRubr(self, codRubr): self.codRubr = codRubr
    def get_ideTabRubr(self): return self.ideTabRubr
    def set_ideTabRubr(self, ideTabRubr): self.ideTabRubr = ideTabRubr
    def get_qtdRubr(self): return self.qtdRubr
    def set_qtdRubr(self, qtdRubr): self.qtdRubr = qtdRubr
    def get_fatorRubr(self): return self.fatorRubr
    def set_fatorRubr(self, fatorRubr): self.fatorRubr = fatorRubr
    def get_vrUnit(self): return self.vrUnit
    def set_vrUnit(self, vrUnit): self.vrUnit = vrUnit
    def get_vrRubr(self): return self.vrRubr
    def set_vrRubr(self, vrRubr): self.vrRubr = vrRubr
    def hasContent_(self):
        if (
            self.codRubr is not None or
            self.ideTabRubr is not None or
            self.qtdRubr is not None or
            self.fatorRubr is not None or
            self.vrUnit is not None or
            self.vrRubr is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TRubrCaixa', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TRubrCaixa')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TRubrCaixa')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TRubrCaixa', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TRubrCaixa'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TRubrCaixa', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodRubr>%s</%scodRubr>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.codRubr), input_name='codRubr')), namespace_, eol_))
        if self.ideTabRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sideTabRubr>%s</%sideTabRubr>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ideTabRubr), input_name='ideTabRubr')), namespace_, eol_))
        if self.qtdRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdRubr>%s</%sqtdRubr>%s' % (namespace_, self.gds_format_float(self.qtdRubr, input_name='qtdRubr'), namespace_, eol_))
        if self.fatorRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfatorRubr>%s</%sfatorRubr>%s' % (namespace_, self.gds_format_float(self.fatorRubr, input_name='fatorRubr'), namespace_, eol_))
        if self.vrUnit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrUnit>%s</%svrUnit>%s' % (namespace_, self.gds_format_float(self.vrUnit, input_name='vrUnit'), namespace_, eol_))
        if self.vrRubr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svrRubr>%s</%svrRubr>%s' % (namespace_, self.gds_format_float(self.vrRubr, input_name='vrRubr'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codRubr':
            codRubr_ = child_.text
            codRubr_ = self.gds_validate_string(codRubr_, node, 'codRubr')
            self.codRubr = codRubr_
        elif nodeName_ == 'ideTabRubr':
            ideTabRubr_ = child_.text
            ideTabRubr_ = self.gds_validate_string(ideTabRubr_, node, 'ideTabRubr')
            self.ideTabRubr = ideTabRubr_
        elif nodeName_ == 'qtdRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'qtdRubr')
            self.qtdRubr = fval_
        elif nodeName_ == 'fatorRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'fatorRubr')
            self.fatorRubr = fval_
        elif nodeName_ == 'vrUnit':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrUnit')
            self.vrUnit = fval_
        elif nodeName_ == 'vrRubr':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'vrRubr')
            self.vrRubr = fval_
# end class TRubrCaixa


class TNaoResid(GeneratedsSuper):
    """Endereço no Exterior - Fiscal"""
    subclass = None
    superclass = None
    def __init__(self, idePais=None, endExt=None):
        self.original_tagname_ = None
        self.idePais = idePais
        self.endExt = endExt
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TNaoResid)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TNaoResid.subclass:
            return TNaoResid.subclass(*args_, **kwargs_)
        else:
            return TNaoResid(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_idePais(self): return self.idePais
    def set_idePais(self, idePais): self.idePais = idePais
    def get_endExt(self): return self.endExt
    def set_endExt(self, endExt): self.endExt = endExt
    def hasContent_(self):
        if (
            self.idePais is not None or
            self.endExt is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TNaoResid', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TNaoResid')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TNaoResid')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TNaoResid', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TNaoResid'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TNaoResid', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.idePais is not None:
            self.idePais.export(outfile, level, namespace_, name_='idePais', pretty_print=pretty_print)
        if self.endExt is not None:
            self.endExt.export(outfile, level, namespace_, name_='endExt', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'idePais':
            obj_ = idePais.factory()
            obj_.build(child_)
            self.idePais = obj_
            obj_.original_tagname_ = 'idePais'
        elif nodeName_ == 'endExt':
            obj_ = endExt.factory()
            obj_.build(child_)
            self.endExt = obj_
            obj_.original_tagname_ = 'endExt'
# end class TNaoResid


class idePais(GeneratedsSuper):
    """Identificação do País onde foi efetuado o pagamento"""
    subclass = None
    superclass = None
    def __init__(self, codPais=None, indNIF=None, nifBenef=None):
        self.original_tagname_ = None
        self.codPais = codPais
        self.indNIF = indNIF
        self.nifBenef = nifBenef
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, idePais)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if idePais.subclass:
            return idePais.subclass(*args_, **kwargs_)
        else:
            return idePais(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codPais(self): return self.codPais
    def set_codPais(self, codPais): self.codPais = codPais
    def get_indNIF(self): return self.indNIF
    def set_indNIF(self, indNIF): self.indNIF = indNIF
    def get_nifBenef(self): return self.nifBenef
    def set_nifBenef(self, nifBenef): self.nifBenef = nifBenef
    def hasContent_(self):
        if (
            self.codPais is not None or
            self.indNIF is not None or
            self.nifBenef is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='idePais', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('idePais')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='idePais')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='idePais', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='idePais'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='idePais', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codPais is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodPais>%s</%scodPais>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.codPais), input_name='codPais')), namespace_, eol_))
        if self.indNIF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindNIF>%s</%sindNIF>%s' % (namespace_, self.gds_format_integer(self.indNIF, input_name='indNIF'), namespace_, eol_))
        if self.nifBenef is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snifBenef>%s</%snifBenef>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.nifBenef), input_name='nifBenef')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codPais':
            codPais_ = child_.text
            codPais_ = self.gds_validate_string(codPais_, node, 'codPais')
            self.codPais = codPais_
        elif nodeName_ == 'indNIF':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'indNIF')
            self.indNIF = ival_
        elif nodeName_ == 'nifBenef':
            nifBenef_ = child_.text
            nifBenef_ = self.gds_validate_string(nifBenef_, node, 'nifBenef')
            self.nifBenef = nifBenef_
# end class idePais


class codPais(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codPais)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codPais.subclass:
            return codPais.subclass(*args_, **kwargs_)
        else:
            return codPais(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='codPais', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codPais')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='codPais')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='codPais', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='codPais'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='codPais', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class codPais


class indNIF(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, indNIF)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if indNIF.subclass:
            return indNIF.subclass(*args_, **kwargs_)
        else:
            return indNIF(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='indNIF', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('indNIF')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='indNIF')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='indNIF', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='indNIF'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='indNIF', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class indNIF


class nifBenef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nifBenef)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nifBenef.subclass:
            return nifBenef.subclass(*args_, **kwargs_)
        else:
            return nifBenef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nifBenef', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nifBenef')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nifBenef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nifBenef', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nifBenef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nifBenef', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class nifBenef


class endExt(GeneratedsSuper):
    """Informações complementares de endereço do beneficiário."""
    subclass = None
    superclass = None
    def __init__(self, dscLograd=None, nrLograd=None, complem=None, bairro=None, nmCid=None, codPostal=None):
        self.original_tagname_ = None
        self.dscLograd = dscLograd
        self.nrLograd = nrLograd
        self.complem = complem
        self.bairro = bairro
        self.nmCid = nmCid
        self.codPostal = codPostal
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, endExt)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if endExt.subclass:
            return endExt.subclass(*args_, **kwargs_)
        else:
            return endExt(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dscLograd(self): return self.dscLograd
    def set_dscLograd(self, dscLograd): self.dscLograd = dscLograd
    def get_nrLograd(self): return self.nrLograd
    def set_nrLograd(self, nrLograd): self.nrLograd = nrLograd
    def get_complem(self): return self.complem
    def set_complem(self, complem): self.complem = complem
    def get_bairro(self): return self.bairro
    def set_bairro(self, bairro): self.bairro = bairro
    def get_nmCid(self): return self.nmCid
    def set_nmCid(self, nmCid): self.nmCid = nmCid
    def get_codPostal(self): return self.codPostal
    def set_codPostal(self, codPostal): self.codPostal = codPostal
    def hasContent_(self):
        if (
            self.dscLograd is not None or
            self.nrLograd is not None or
            self.complem is not None or
            self.bairro is not None or
            self.nmCid is not None or
            self.codPostal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='endExt', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('endExt')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='endExt')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='endExt', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='endExt'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='endExt', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dscLograd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdscLograd>%s</%sdscLograd>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.dscLograd), input_name='dscLograd')), namespace_, eol_))
        if self.nrLograd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrLograd>%s</%snrLograd>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.nrLograd), input_name='nrLograd')), namespace_, eol_))
        if self.complem is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scomplem>%s</%scomplem>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.complem), input_name='complem')), namespace_, eol_))
        if self.bairro is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbairro>%s</%sbairro>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.bairro), input_name='bairro')), namespace_, eol_))
        if self.nmCid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snmCid>%s</%snmCid>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.nmCid), input_name='nmCid')), namespace_, eol_))
        if self.codPostal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodPostal>%s</%scodPostal>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.codPostal), input_name='codPostal')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dscLograd':
            dscLograd_ = child_.text
            dscLograd_ = self.gds_validate_string(dscLograd_, node, 'dscLograd')
            self.dscLograd = dscLograd_
        elif nodeName_ == 'nrLograd':
            nrLograd_ = child_.text
            nrLograd_ = self.gds_validate_string(nrLograd_, node, 'nrLograd')
            self.nrLograd = nrLograd_
        elif nodeName_ == 'complem':
            complem_ = child_.text
            complem_ = self.gds_validate_string(complem_, node, 'complem')
            self.complem = complem_
        elif nodeName_ == 'bairro':
            bairro_ = child_.text
            bairro_ = self.gds_validate_string(bairro_, node, 'bairro')
            self.bairro = bairro_
        elif nodeName_ == 'nmCid':
            nmCid_ = child_.text
            nmCid_ = self.gds_validate_string(nmCid_, node, 'nmCid')
            self.nmCid = nmCid_
        elif nodeName_ == 'codPostal':
            codPostal_ = child_.text
            codPostal_ = self.gds_validate_string(codPostal_, node, 'codPostal')
            self.codPostal = codPostal_
# end class endExt


class dscLograd(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, dscLograd)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if dscLograd.subclass:
            return dscLograd.subclass(*args_, **kwargs_)
        else:
            return dscLograd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='dscLograd', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('dscLograd')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dscLograd')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='dscLograd', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='dscLograd'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='dscLograd', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class dscLograd


class nrLograd(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nrLograd)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nrLograd.subclass:
            return nrLograd.subclass(*args_, **kwargs_)
        else:
            return nrLograd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nrLograd', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nrLograd')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nrLograd')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nrLograd', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nrLograd'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nrLograd', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class nrLograd


class complem(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, complem)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if complem.subclass:
            return complem.subclass(*args_, **kwargs_)
        else:
            return complem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='complem', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('complem')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='complem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='complem', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='complem'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='complem', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class complem


class bairro(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, bairro)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if bairro.subclass:
            return bairro.subclass(*args_, **kwargs_)
        else:
            return bairro(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='bairro', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('bairro')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='bairro')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='bairro', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='bairro'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='bairro', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class bairro


class nmCid(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nmCid)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nmCid.subclass:
            return nmCid.subclass(*args_, **kwargs_)
        else:
            return nmCid(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='nmCid', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nmCid')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='nmCid')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='nmCid', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='nmCid'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='nmCid', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class nmCid


class codPostal(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, codPostal)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if codPostal.subclass:
            return codPostal.subclass(*args_, **kwargs_)
        else:
            return codPostal(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='codPostal', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('codPostal')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='codPostal')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='codPostal', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='codPostal'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='codPostal', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class codPostal


GDSClassesMapping = {
    'ideEmpregador': TEmpregador,
    'ideEvento': TIdeEveFopagMensal,
    'idePgtoExt': TNaoResid,
    'infoPgtoParc': TPgtoParc,
    'penAlim': TPensaoAlim,
    'retPgtoTot': TRubrCaixa,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eSocial'
        rootClass = eSocial
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eSocial'
        rootClass = eSocial
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eSocial'
        rootClass = eSocial
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eSocial'
        rootClass = eSocial
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from evtPgtos import *\n\n')
        sys.stdout.write('import evtPgtos as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "TEmpregador",
    "TIdeEveFopagMensal",
    "TNaoResid",
    "TPensaoAlim",
    "TPgtoParc",
    "TRubrCaixa",
    "eSocial"
]
